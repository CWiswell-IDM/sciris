"""
scirisobjects.py -- classes for Sciris objects which are generally managed
    
Last update: 9/26/17 (gchadder3)
"""

#
# Imports
#

import datastore as ds
import uuid

#
# Classes
#

class ScirisObject(object):
    """
    A general Sciris object (base class for all such objects).
    
    Methods:
        __init__(theUID: UUID [None]): void -- constructor
        show(): void -- print the contents of the object
                    
    Attributes:
        uid (UUID) -- the unique ID for the user (uuid Python library-related)
        
    Usage:
        >>> theObj = ScirisObject(uuid.UUID('12345678123456781234567812345678'))                      
    """
    
    def  __init__(self, theUID=None, theTypePrefix='obj', theFileSuffix='.obj', 
        theInstanceLabel=''):        
        # If we passed in a UUID, use it; otherwise, use a new random UUID, 
        # generated by uuid4().
        if theUID is not None:
            self.uid = theUID
        else:
            self.uid = uuid.uuid4()
            
        # Set the other variables that might be used with DataStore.
        self.typePrefix = theTypePrefix
        self.fileSuffix = theFileSuffix
        self.instanceLabel = theInstanceLabel
        
    def loadFromCopy(self, otherObject):
        if type(otherObject) == type(self):
            self.uid = otherObject.uid
            self.typePrefix = otherObject.typePrefix
            self.instanceLabel = otherObject.instanceLabel
            
    def addToDataStore(self):
        # Add our representation to the DataStore.
        ds.theDataStore.add(self, self.uid, self.typePrefix, self.fileSuffix, 
            self.instanceLabel)
        
    def loadCopyFromDataStore(self, theUID=None):
        if theUID is None:
            return ds.theDataStore.retrieve(self.uid)
        else:
            return ds.theDataStore.retrieve(theUID)
            
    def loadFromDataStore(self, theUID=None):
        # Get a copy from the DataStore.
        copyFromStore = self.loadCopyFromDataStore(theUID)
        
        # Copy the internal information over from the copy to ourselves.
        self.loadFromCopy(copyFromStore)
        
    def updateDataStore(self):
        # Update our DataStore representation with our current state. 
        ds.theDataStore.update(self.uid, self) 
        
    def deleteFromDataStore(self):
        ds.theDataStore.delete(self.uid)
    
    def show(self):
        print 'UUID: %s' % self.uid.hex
        print 'Type Prefix: %s' % self.typePrefix
        print 'File Suffix: %s' % self.fileSuffix
        print 'Instance Label: %s' % self.instanceLabel
        
    def getUserFrontEndRepr(self):
        objInfo = {
            'scirisobject': {
                'instancelabel': self.instanceLabel                
            }
        }
        return objInfo
    
    def getAdminFrontEndRepr(self):
        objInfo = {
            'scirisobject': {
                'UID': self.uid.hex, 
                'typeprefix': self.typePrefix, 
                'filesuffix': self.fileSuffix, 
                'instancelabel': self.instanceLabel                
            }
        }
        return objInfo 
          
class ScirisCollection(ScirisObject):
    """
    A collection of ScirisObjects.
    
    Methods:
        __init__(theUID: UUID): void -- constructor            
        getUserByUID(theUID: UUID or str): User or None -- returns the User  
            object pointed to by theUID
        getUserByUsername(theUsername: str): User or None -- return the User
            object pointed to by the username
        add(theUser: User): void -- add a User to the dictionary and update
            the dictionary's DataStore state
        update(theUser: User): void -- update a User in the dictionary and 
            update the dictionary's DataStore state
        deleteByUID(theUID: UUID or str): void -- delete a User in the dictionary
            selected by the UID, and update the dictionary's DataStore state
        deleteByUsername(theUsername: str): void -- delete a User in the 
            dictionary selected by a username, and update the dictionary's 
            DataStore state
        deleteAll(): void -- delete the entire contents of the UserDict and 
            update the dictionary's DataStore state
        showUsers(): void -- show all of the user information in the 
            dictionary
                    
    Attributes:
        theObjectDict (dict) -- the Python dictionary holding the ScirisObjects
        uid (UUID) -- the unique ID for the collection (uuid Python library-related)
        
    Usage:
        >>> theObjs = ScirisCollection(uuid.UUID('12345678123456781234567812345678'))                      
    """
    
    def __init__(self, theUID):
        # Set superclass parameters.
        super(ScirisCollection, self).__init__(theUID)
        
        # Create a Python dict to hold the ScirisObjects.
        self.theObjectDict = {}
        
    def getObjectByUID(self, theUID):
        # Make sure the argument is a valid UUID, converting a hex text to a
        # UUID object, if needed.
        validUID = ds.getValidUUID(theUID)
        
        # If we have a valid UUID, return the matching ScirisObject (if any); 
        # otherwise, return None.
        if validUID is not None:
            return self.theObjectDict.get(validUID, None)
        else:
            return None
        
    def addObject(self, theObject):
        # Add the object to the hash table, keyed by the UID.
        self.theObjectDict[theObject.uid] = theObject
        
        # Update our DataStore representation. 
        self.updateDataStore()
    
    def deleteObjectByUID(self, theUID):
        # Make sure the argument is a valid UUID, converting a hex text to a
        # UUID object, if needed.        
        validUID = ds.getValidUUID(theUID)
        
        # If we have a valid UUID...
        if validUID is not None:
            # Get the object pointed to by the UID.
            theObject = self.theObjectDict[validUID]
            
            # If a match is found...
            if theObject is not None:
                # Remove entries from theObjectDict.
                del self.theObjectDict[validUID]
                
                # Update our DataStore representation. 
                self.updateDataStore()
    
    def deleteAllObjects(self):
        # Reset the Python dicts.
        self.theObjectDict = {}
        
        # Update our DataStore representation. 
        self.updateDataStore()  
        
    def show(self):
        # For each key in the dictionary...
        for theKey in self.theObjectDict:
            # Get the object pointed to.
            theObject = self.theObjectDict[theKey]
            
            # Separator line.
            print '--------------------------------------------'
            
            # Show the handle contents.
            theObject.show()
            
        # Separator line.
        print '--------------------------------------------'
    
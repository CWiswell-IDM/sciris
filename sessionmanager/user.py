"""
user.py -- code related to Sciris user management
    
Last update: 9/14/17 (gchadder3)
"""

# NOTE: We don't want Sciris users to have to customize this file much.

#
# Imports
#

from flask import session
from flask_login import current_user, login_user, logout_user
from hashlib import sha224
import uuid

#
# Classes
#

class User(object):
    """
    A Sciris user.
    
    Methods:
        __init__(theUsername: str, thePassword: str, theDisplayName: str, 
            theEmail: str [''], hasAdminRights: bool [False], 
            theUID: UUID [None]): void -- constructor
        get_id(): UUID -- get the unique ID of this user (method required by 
            Flask-Login)
                    
    Attributes:
        uid (UUID) -- the unique ID for the user (uuid Python library-related)
        is_authenticated (bool) -- is this user authenticated? (attribute 
            required by Flask-Login)
        is_active (bool) -- is this user's account active? (attribute 
            required by Flask-Login)
        is_anonymous (bool) -- is this user considered anonymous?  (attribute
            required by Flask-Login)
        username (str) -- the username used to log in
        password (str) -- the user's SHA224-hashed password
        displayname (str) -- the user's name, which gets displayed in the 
            browser
        email (str) -- the user's email
        is_admin (bool) -- does this user have admin rights?
        
    Usage:
        >>> myUser = User('newguy', 'mesogreen', 'Ozzy Mandibulus',  \
            'tastybats@yahoo.com', theUID=uuid.UUID('12345678123456781234567812345678'))                      
    """
    
    def  __init__(self, theUsername, thePassword, theDisplayName, theEmail='', 
        hasAdminRights=False, theUID=None):
        # Set the user to be authentic.
        self.is_authenticated = True
        
        # Set the account to be active.
        self.is_active = True
        
        # The user is not anonymous.
        self.is_anonymous = False
        
        # Set the username.
        self.username = theUsername
        
        # Set the raw password and use SHA224 to get the hashed version in 
        # hex form.
        rawPassword = thePassword
        self.password = sha224(rawPassword).hexdigest()        
        
        # Set the displayname (what the browser will show).
        self.displayname = theDisplayName
        
        # Set the user's email.
        self.email = theEmail
        
        # Set whether this user has admin rights.
        self.is_admin = hasAdminRights
        
        # If we passed in a UUID, use it; otherwise, use a new random UUID, 
        # generated by uuid4().
        if theUID is not None:
            self.uid = theUID
        else:
            self.uid = uuid.uuid4()
        
    def get_id(self):
        return self.uid

myUser = User('newguy', 'mesogreen', 'Ozzy Mandibulus', 'tastybats@yahoo.com', \
    theUID=uuid.UUID('12345678123456781234567812345678'))
myUser2 = User('admin', 'mesoawesome', 'Admin Dude', 'admin@scirisuser.net', \
    hasAdminRights=True, theUID=uuid.UUID('12345678123456781234567812345679'))

class UserList(object):
    def __init__(self):
        # Create the Python list to hold the user objects.
        self.theUsersList = []
        
        # Add the two sample users.
        self.theUsersList.append(myUser)
        self.theUsersList.append(myUser2)
        
        self.uuidHashes = {}
        self.uuidHashes[myUser.get_id()] = 0
        self.uuidHashes[myUser2.get_id()] = 1
        
        self.usernameHashes = {}
        self.usernameHashes[myUser.username] = 0
        self.usernameHashes[myUser2.username] = 1
        
    def getUserByUID(self, theUID):
        userIndex = self.uuidHashes.get(theUID, None)
        if userIndex is not None:
            return self.theUsersList[userIndex]
        else:
            return None
    
    def getUserByUsername(self, theUsername):
        userIndex = self.usernameHashes.get(theUsername, None)
        if userIndex is not None:
            return self.theUsersList[userIndex]
        else:
            return None
        
myUserList = UserList()

#
# RPC functions
#

def user_login(userName, password):
    # Get the matching user (if any).
    matchingUser = myUserList.getUserByUsername(userName)
    
    # If we have a match and the password matches, also, log in the user and 
    # return success; otherwise, return failure.
    if matchingUser is not None and matchingUser.password == password:
        # Log the user in.
        login_user(matchingUser)
        
        return 'success'
    else:
        return 'failure'
    
def user_logout():
    # Log the user out and set the session to having an anonymous user.
    logout_user()
    
    # Clear the session cookie.
    session.clear()
    
    return

def get_current_user_info():
    userInfo = {
        'username': current_user.username
    }
    return userInfo